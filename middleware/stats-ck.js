function delta(e,t,n,r,i){var s={};r.forEach(function(n,o,u){var a=n.keys.join(" ");t[n.model].find({AID:e},a,function(e,t){var u={};for(var a in n.keys){var f=n.keys[a];if(t[0][f].length<2)u[f]="--";else{var l=t[0][f].sort(dtSort),c=l[0].val.replace(/[ a-zA-Z\*\(\)]/g,""),h=l[1].val.replace(/[ a-zA-Z\*\(\)]/g,"");u[f]=isNaN(Math.round((c-h)*100)/100)?"--":Math.round((c-h)*100)/100}}s[n.model]=u;o===r.length-1&&i(s)})})}function tSort(e,t){return e<t?1:e>t?-1:0}function dtSort(e,t){return e.dt<t.dt?1:e.dt>t.dt?-1:0}function average(e,t,n,r,i){var s=[];t=t.setHours(0,0,0,0);r.forEach(function(o,u,a){var f=o.keys.join(" ");e[o.model].find({},f,function(e,u){for(var a in o.keys){var f=o.keys[a],l=[];for(var c=0;c<u.length;c++)for(var h=0;h<u[c][f].length;h++)t===u[c][f][h].dt.setHours(0,0,0,0)&&u[c][f][h].val.replace(/[ a-zA-Z\*\(\)]/g,"")&&l.push(u[c][f][h].val.replace(/[ a-zA-Z\*\(\)]/g,""));s.push({date:moment(t)._d,label:f,avg:l.length>1?l.reduce(function(e,t){return+e+ +t})/l.length:"--"})}s.length===n&&wrapper(r,s,i)})})}function wrapper(e,t,n){for(var r=0;r<e.length;r++)for(var i=0;i<t.length;i++)e[r].keys.indexOf(t[i].label)!=-1&&(t[i].model=e[r].model);n(e,t)}function filterModels(e,t){var n=[],r=[],i=getKeys(e);i.forEach(function(e,t,i){if(e!="RecordTime"&&e!="Metric"){n.push({model:e,keys:[]});r.push(e)}});t(n,r)}function getKeys(e){var t=[];for(var n in e){if(!e.hasOwnProperty(n))continue;t.push(n)}return t}function filterMetrics(e,t,n,r){var i=["_id","__v","SID","MID","AID","teams"],s=[];t.forEach(function(n,o,u){e[n.model].findOne({},function(e,o){if(e)throw e;s.push(n.model);for(var u in o._doc)i.indexOf(u.toString())===-1&&n.keys.push(u);if(s.length===t.length){var a=0;for(var f=0;f<t.length;f++)a+=t[f].keys.length;r(a,t)}})})}function keyDiscovery(){}var Athlete=require("../models").Athletes,School=require("../models").Schools,moment=require("moment");module.exports.getAverage=function(e,t,n,r){var i=[];School.findOne({name:e},function(e,n){t.RecordTime.find({},{time:1},function(e,n){if(e)throw e;n=n[0].time.sort(tSort);filterModels(t,function(e,i){filterMetrics(t,e,i,function(e,i){average(t,n[0],e,i,function(e,t){r(e,t)})})})})})};module.exports.getDelta=function(e,t,n,r){School.findOne({name:e},function(e,i){filterModels(n,function(e,i){filterMetrics(n,e,i,function(e,i){delta(t,n,e,i,function(e){r(e)})})})})};